""" Tests for construction of a Pipeline """

import pytest

from pypiper import Pipeline, PipelineManager
from tests.helpers import named_param, SafeTestPipeline


__author__ = "Vince Reuter"
__email__ = "vreuter@virginia.edu"



def test_pipeline_requires_stages_definition(tmpdir):
    """ To create a pipeline, define stages (execution steps). """

    class NoStagesPipeline(SafeTestPipeline):
        pass

    name = "test-pipe"

    # Sensitivity: test exception for bad case.
    with pytest.raises(TypeError):
        NoStagesPipeline(name=name, outfolder=tmpdir.strpath)
    # Specificity: test no exception for good case.
    _EmptyPipeline(name=name, outfolder=tmpdir.strpath)



class JustManagerArgument:
    """ A pipeline can be created with just a manager argument. """


    NAME_HOOK = "pl_mgr_name"


    @pytest.fixture
    def pl_mgr(self, request, get_pipe_manager):
        """ Provide each of this class's test cases with pipeline manager. """
        if self.NAME_HOOK in request.fixturenames:
            name = request.getfixturevalue(self.NAME_HOOK)
        else:
            name = "test-pipe"
        return get_pipe_manager(name=name)


    @named_param(
        argnames=NAME_HOOK, argvalues=["arbitrary-pipeline", "DummyPipe"])
    def test_pipeline_adopts_manager_name(self, pl_mgr_name, pl_mgr):
        """ If given just a manager, a pipeline uses the manager name. """
        pl = Pipeline(manager=pl_mgr)
        assert pl_mgr_name == pl_mgr.name
        assert pl_mgr_name == pl.name


    def test_pipeline_adopts_manager_output_folder(self, pl_mgr):
        """ Pipeline uses manager output folder if given just manager. """
        pl = Pipeline(manager=pl_mgr)
        assert pl_mgr.outfolder == pl.outfolder



class MinimalArgumentsWithoutManagerTests:
    """ Tests for pipeline constructor argument provision without manager. """


    def test_pipeline_creates_manager(self, tmpdir):
        """ If not passed a pipeline manager, a pipeline creates one. """
        empty = _EmptyPipeline(name="empty", outfolder=tmpdir.strpath)
        assert isinstance(empty.manager, PipelineManager)


    @named_param("pipe_name", ["test-pipe", "DummyPipeline"])
    def test_manager_adopts_pipeline_name(self, pipe_name, tmpdir):
        """ Autogenerated pipeline manager uses pipeline's name. """
        pl = _EmptyPipeline(name=pipe_name, outfolder=tmpdir.strpath)
        assert pipe_name == pl.name
        assert pl.name == pl.manager.name


    def test_manager_adopts_pipeline_output_folder(self, tmpdir):
        """ Autogenerated pipeline manager uses pipeline's output folder. """
        pl = _EmptyPipeline(name="test-pipe", outfolder=tmpdir.strpath)
        assert tmpdir.strpath == pl.outfolder
        assert pl.outfolder == pl.manager.outfolder



def test_empty_pipeline_manager_name_and_no_explicit_pipeline_name():
    pass



def test_pipeline_requires_either_manager_or_outfolder():
    """ Pipeline must be passed pipeline manager or output folder. """
    with pytest.raises(TypeError):
        _EmptyPipeline()



def test_manager_name_can_be_applied_to_pipeline():
    pass



def test_created_manager_name_matches_pipeline_name():
    pass



def test_manager_uses_pipeline_outfolder():
    pass



def test_pipeline_ignores_outfolder_if_manager_is_passed():
    """ Manager's outfolder trumps explicit outfolder if both are passed. """
    pass



@pytest.fixture
def empty_pipeline(request):
    """ Provide test case with minimal pipeline instance. """
    if "pipe_name" in request.fixturenames:
        name = request.getfixturevalue("pipe_name")
    else:
        name = "empty"
    return _EmptyPipeline(name)



class _EmptyPipeline(SafeTestPipeline):
    """ Minimal pipeline declaration. """

    def stages(self):
        """ Sham stages definition. """
        return [_do_nothing]



def _do_nothing():
    return
